classdef tests
% Set of tests to look at some of the properties of different vesicle
% configurations


properties
X
N
vesicleInit   
% initial vesicle configuration stored as an object of calss capsules
vesicleFinal  
% final vesicle configuration stored as an object of calss capsules
%farField
% background flow

end % properties


methods



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function o = tests(geom,N)
% constructor


if strcmp(geom,'extensional1')
  o.N = 96;
  [Xinit,siginit,Xfinal,sigfinal] = o.extensional1;
%  o.farField = @(X) o.bgFlow(X,'extensional');
end

if strcmp(geom,'ellipse');
  o.N = N;
  a = 2; b = 1;
  Xinit = o.ellipse(a,b);
  Xfinal = [];
  siginit = [];
  sigfinal = [];
%  o.farField = @(X) zeros(size(X));
end

if strcmp(geom,'curly');
  o.N = N;
  a = 2; b = 1;
  Xinit = o.curly;
  Xfinal = [];
  siginit = [];
  sigfinal = [];
%  o.farField = @(X) zeros(size(X));
end

o.X = Xinit;


vesicleInit = capsules(Xinit,siginit,[],1e-1,1,false);
vesicleFinal = capsules(Xfinal,sigfinal,[],1e-1,1,false);

o.vesicleInit = vesicleInit;
o.vesicleFinal = vesicleFinal;


end % tests: constructor


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [trac,vel] = computeVelocity(o,vesicle)


op = poten(vesicle.N);
Galpert = op.stokesSLmatrix(vesicle);
% Alpert's single-layer potential matrix
SLP = @(X) op.exactStokesSLdiag(vesicle,Galpert,X);
% method of evaluating single layer potential due to self
kernel = @op.exactStokesSL;
% single-layer potential kernel
NearV2V = vesicle.getZone([],1);
% near singular structure

trac = vesicle.tracJump(vesicle.X,vesicle.sig);
% traction jump
Fslp = op.nearSingInt(vesicle,trac,SLP,SLP,NearV2V,...
    kernel,kernel,vesicle,true);
% single-layer potential due to traction jump

vel = Fslp + o.farField(vesicle.X);
% add in the background velocity

figure(1);clf;hold on
plot(vesicle.X(1:end/2,:),vesicle.X(end/2+1:end,:),'r');
quiver(vesicle.X(1:end/2,:),vesicle.X(end/2+1:end,:),...
    vel(1:end/2,:),vel(end/2+1:end,:),0.1,'b');



end % computeVelocity



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function vInf = bgFlow(o,X,geom)

oc = curve;
[x,y] = oc.getXY(X);

if strcmp(geom,'extensional')
  vInf = [-x;y];
end

end % bgFlow


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function X = curly(o)

theta = (0:o.N-1)'*2*pi/o.N;
a = 1; b = 3*a; c = 0.85; 
r = 0.5*sqrt( (a*cos(theta)).^2 + (b*sin(theta)).^2) + ...
    .07*cos(12*(theta));
x = c*r.*cos(theta);
y = r.*sin(theta);
X = [x;y];

end % curly

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function X = ellipse(o,a,b)

theta = (0:o.N-1)'*2*pi/o.N;
X = [a*cos(theta);b*sin(theta)];


end % ellipse

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [Xinit,siginit,Xfinal,sigfinal] = extensional1(o)
% initial and final condition of two vesicles in an extensional flow.  Adaptive
% time stepping with a tolerance of 1e-3.  Actual error achieved at time
% horizon is 2.12e-4

N = 96; nv = 2;
Xinit = zeros(2*N,nv);
siginit = zeros(N,nv);
Xfinal = zeros(2*N,nv);
sigfinal = zeros(N,nv);

% This configuration is stored in may122015.  Solution requested 3 digits of accuarcy
% start of initial condition
Xinit(1:96,1) = [...
-6.2569999999999992e-01 ...
-6.2631660466454231e-01 ...
-6.2816982532054877e-01 ...
-6.3126998063937412e-01 ...
-6.3563457003817003e-01 ...
-6.4128875886110881e-01 ...
-6.4826612964160746e-01 ...
-6.5660965973020835e-01 ...
-6.6637304617550341e-01 ...
-6.7762261759537101e-01 ...
-6.9043976590846456e-01 ...
-7.0492415480701454e-01 ...
-7.2119811843458215e-01 ...
-7.3941282492665472e-01 ...
-7.5975688520360563e-01 ...
-7.8246845263339093e-01 ...
-8.0785304873913466e-01 ...
-8.3631036992656638e-01 ...
-8.6837565788928639e-01 ...
-9.0478492645510089e-01 ...
-9.4657754372623493e-01 ...
-9.9524564719993358e-01 ...
-1.0528593735559921e+00 ...
-1.1215454018893058e+00 ...
-1.1999999999999997e+00 ...
-1.2784545981106938e+00 ...
-1.3471406264440071e+00 ...
-1.4047543528000666e+00 ...
-1.4534224562737652e+00 ...
-1.4952150735448997e+00 ...
-1.5316243421107134e+00 ...
-1.5636896300734331e+00 ...
-1.5921469512608653e+00 ...
-1.6175315473666090e+00 ...
-1.6402431147963945e+00 ...
-1.6605871750733456e+00 ...
-1.6788018815654180e+00 ...
-1.6950758451929853e+00 ...
-1.7095602340915357e+00 ...
-1.7223773824046282e+00 ...
-1.7336269538244973e+00 ...
-1.7433903402697919e+00 ...
-1.7517338703583860e+00 ...
-1.7587112411389088e+00 ...
-1.7643654299618114e+00 ...
-1.7687300193605970e+00 ...
-1.7718301746795704e+00 ...
-1.7736833953353255e+00 ...
-1.7743000000000000e+00 ...
-1.7736833953353255e+00 ...
-1.7718301746795704e+00 ...
-1.7687300193605970e+00 ...
-1.7643654299618114e+00 ...
-1.7587112411389088e+00 ...
-1.7517338703583860e+00 ...
-1.7433903402697917e+00 ...
-1.7336269538244975e+00 ...
-1.7223773824046282e+00 ...
-1.7095602340915352e+00 ...
-1.6950758451929853e+00 ...
-1.6788018815654175e+00 ...
-1.6605871750733452e+00 ...
-1.6402431147963945e+00 ...
-1.6175315473666092e+00 ...
-1.5921469512608650e+00 ...
-1.5636896300734333e+00 ...
-1.5316243421107134e+00 ...
-1.4952150735448986e+00 ...
-1.4534224562737648e+00 ...
-1.4047543528000661e+00 ...
-1.3471406264440080e+00 ...
-1.2784545981106936e+00 ...
-1.2000000000000000e+00 ...
-1.1215454018893065e+00 ...
-1.0528593735559912e+00 ...
-9.9524564719993269e-01 ...
-9.4657754372623382e-01 ...
-9.0478492645510100e-01 ...
-8.6837565788928583e-01 ...
-8.3631036992656638e-01 ...
-8.0785304873913533e-01 ...
-7.8246845263339093e-01 ...
-7.5975688520360596e-01 ...
-7.3941282492665450e-01 ...
-7.2119811843458193e-01 ...
-7.0492415480701442e-01 ...
-6.9043976590846401e-01 ...
-6.7762261759537346e-01 ...
-6.6637304617549975e-01 ...
-6.5660965973020680e-01 ...
-6.4826612964163199e-01 ...
-6.4128875886104053e-01 ...
-6.3563457003824153e-01 ...
-6.3126998063948592e-01 ...
-6.2816982532008525e-01 ...
-6.2631660466505512e-01 ...
];

Xinit(97:192,1) = [...
2.1871647530095992e-18 ...
8.0664240362835912e-02 ...
1.6130949620097801e-01 ...
2.4191650703895295e-01 ...
3.2246489921486599e-01 ...
4.0293289217520206e-01 ...
4.8329701034086031e-01 ...
5.6353085900143074e-01 ...
6.4360403193883098e-01 ...
7.2348174081465544e-01 ...
8.0312296745994816e-01 ...
8.8247789288750433e-01 ...
9.6148484672174639e-01 ...
1.0400664061697302e+00 ...
1.1181231988887661e+00 ...
1.1955235541498281e+00 ...
1.2720877623283047e+00 ...
1.3475619392883837e+00 ...
1.4215721763407887e+00 ...
1.4935390773585737e+00 ...
1.5625066464823467e+00 ...
1.6267760390612305e+00 ...
1.6830813598702044e+00 ...
1.7248763088710626e+00 ...
1.7412000000000001e+00 ...
1.7248763088710626e+00 ...
1.6830813598702048e+00 ...
1.6267760390612300e+00 ...
1.5625066464823463e+00 ...
1.4935390773585726e+00 ...
1.4215721763407887e+00 ...
1.3475619392883844e+00 ...
1.2720877623283044e+00 ...
1.1955235541498279e+00 ...
1.1181231988887652e+00 ...
1.0400664061697291e+00 ...
9.6148484672174594e-01 ...
8.8247789288750467e-01 ...
8.0312296745994682e-01 ...
7.2348174081465866e-01 ...
6.4360403193882432e-01 ...
5.6353085900142763e-01 ...
4.8329701034092654e-01 ...
4.0293289217497752e-01 ...
3.2246489921516258e-01 ...
2.4191650703957526e-01 ...
1.6130949619708668e-01 ...
8.0664240371470242e-02 ...
-5.6001263152339200e-16 ...
-8.0664240371471352e-02 ...
-1.6130949619708701e-01 ...
-2.4191650703957487e-01 ...
-3.2246489921516291e-01 ...
-4.0293289217497785e-01 ...
-4.8329701034092692e-01 ...
-5.6353085900142796e-01 ...
-6.4360403193882387e-01 ...
-7.2348174081465899e-01 ...
-8.0312296745994782e-01 ...
-8.8247789288750511e-01 ...
-9.6148484672174672e-01 ...
-1.0400664061697305e+00 ...
-1.1181231988887650e+00 ...
-1.1955235541498275e+00 ...
-1.2720877623283051e+00 ...
-1.3475619392883842e+00 ...
-1.4215721763407889e+00 ...
-1.4935390773585744e+00 ...
-1.5625066464823467e+00 ...
-1.6267760390612305e+00 ...
-1.6830813598702041e+00 ...
-1.7248763088710628e+00 ...
-1.7412000000000001e+00 ...
-1.7248763088710628e+00 ...
-1.6830813598702035e+00 ...
-1.6267760390612291e+00 ...
-1.5625066464823449e+00 ...
-1.4935390773585739e+00 ...
-1.4215721763407876e+00 ...
-1.3475619392883835e+00 ...
-1.2720877623283062e+00 ...
-1.1955235541498288e+00 ...
-1.1181231988887672e+00 ...
-1.0400664061697300e+00 ...
-9.6148484672174539e-01 ...
-8.8247789288750356e-01 ...
-8.0312296745994505e-01 ...
-7.2348174081467154e-01 ...
-6.4360403193880300e-01 ...
-5.6353085900141686e-01 ...
-4.8329701034111772e-01 ...
-4.0293289217433231e-01 ...
-3.2246489921601684e-01 ...
-2.4191650704136963e-01 ...
-1.6130949618587065e-01 ...
-8.0664240396358527e-02 ...
];

Xinit(1:96,2) = [...
2.9412000000000003e+00 ...
2.9248763088709948e+00 ...
2.8830813598702107e+00 ...
2.8267760390612393e+00 ...
2.7625066464823460e+00 ...
2.6935390773585732e+00 ...
2.6215721763407891e+00 ...
2.5475619392883839e+00 ...
2.4720877623283055e+00 ...
2.3955235541498290e+00 ...
2.3181231988887658e+00 ...
2.2400664061697309e+00 ...
2.1614848467217462e+00 ...
2.0824778928875043e+00 ...
2.0031229674599471e+00 ...
1.9234817408146601e+00 ...
1.8436040319388245e+00 ...
1.7635308590014276e+00 ...
1.6832970103409275e+00 ...
1.6029328921749788e+00 ...
1.5224648992151628e+00 ...
1.4419165070395752e+00 ...
1.3613094961970869e+00 ...
1.2806642403714716e+00 ...
1.2000000000000008e+00 ...
1.1193357596285296e+00 ...
1.0386905038029139e+00 ...
9.5808349296042494e-01 ...
8.7753510078483843e-01 ...
7.9706710782502277e-01 ...
7.1670298965907409e-01 ...
6.3646914099857410e-01 ...
5.5639596806117708e-01 ...
4.7651825918534152e-01 ...
3.9687703254005335e-01 ...
3.1752210711249618e-01 ...
2.3851515327825501e-01 ...
1.5993359383027128e-01 ...
8.1876801111235631e-02 ...
4.4764458501727056e-03 ...
-7.2087762328303384e-02 ...
-1.4756193928838335e-01 ...
-2.2157217634078852e-01 ...
-2.9353907735857132e-01 ...
-3.6250664648234587e-01 ...
-4.2677603906122896e-01 ...
-4.8308135987020351e-01 ...
-5.2487630887106196e-01 ...
-5.4120000000000013e-01 ...
-5.2487630887106329e-01 ...
-4.8308135987020506e-01 ...
-4.2677603906123140e-01 ...
-3.6250664648234809e-01 ...
-2.9353907735857554e-01 ...
-2.2157217634079074e-01 ...
-1.4756193928838646e-01 ...
-7.2087762328306271e-02 ...
4.4764458501709292e-03 ...
8.1876801111232966e-02 ...
1.5993359383026773e-01 ...
2.3851515327825212e-01 ...
3.1752210711249507e-01 ...
3.9687703254004958e-01 ...
4.7651825918533697e-01 ...
5.5639596806117264e-01 ...
6.3646914099856999e-01 ...
7.1670298965907109e-01 ...
7.9706710782501933e-01 ...
8.7753510078483576e-01 ...
9.5808349296042228e-01 ...
1.0386905038029102e+00 ...
1.1193357596285258e+00 ...
1.1999999999999966e+00 ...
1.2806642403714690e+00 ...
1.3613094961970860e+00 ...
1.4419165070395725e+00 ...
1.5224648992151590e+00 ...
1.6029328921749755e+00 ...
1.6832970103409237e+00 ...
1.7635308590014249e+00 ...
1.8436040319388223e+00 ...
1.9234817408146583e+00 ...
2.0031229674599458e+00 ...
2.0824778928875016e+00 ...
2.1614848467217449e+00 ...
2.2400664061697277e+00 ...
2.3181231988887632e+00 ...
2.3955235541498245e+00 ...
2.4720877623283024e+00 ...
2.5475619392883813e+00 ...
2.6215721763407851e+00 ...
2.6935390773585732e+00 ...
2.7625066464823433e+00 ...
2.8267760390611847e+00 ...
2.8830813598701743e+00 ...
2.9248763088713639e+00 ...
];

Xinit(97:192,2) = [...
1.2397653696548976e-18 ...
7.8454598110855631e-02 ...
1.4714062644399967e-01 ...
2.0475435280005849e-01 ...
2.5342245627376520e-01 ...
2.9521507354489940e-01 ...
3.3162434211071334e-01 ...
3.6368963007343336e-01 ...
3.9214695126086502e-01 ...
4.1753154736660891e-01 ...
4.4024311479639427e-01 ...
4.6058717507334512e-01 ...
4.7880188156541775e-01 ...
4.9507584519298542e-01 ...
5.0956023409153550e-01 ...
5.2237738240462828e-01 ...
5.3362695382449732e-01 ...
5.4339034026979194e-01 ...
5.5173387035838606e-01 ...
5.5871124113890869e-01 ...
5.6436542996181149e-01 ...
5.6873001936059708e-01 ...
5.7183017467957054e-01 ...
5.7368339533532553e-01 ...
5.7430000000000003e-01 ...
5.7368339533532553e-01 ...
5.7183017467957054e-01 ...
5.6873001936059708e-01 ...
5.6436542996181160e-01 ...
5.5871124113890880e-01 ...
5.5173387035838617e-01 ...
5.4339034026979216e-01 ...
5.3362695382449765e-01 ...
5.2237738240462850e-01 ...
5.0956023409153572e-01 ...
4.9507584519298548e-01 ...
4.7880188156541809e-01 ...
4.6058717507334562e-01 ...
4.4024311479639472e-01 ...
4.1753154736660941e-01 ...
3.9214695126086574e-01 ...
3.6368963007343375e-01 ...
3.3162434211071362e-01 ...
2.9521507354490045e-01 ...
2.5342245627376558e-01 ...
2.0475435280006768e-01 ...
1.4714062644400874e-01 ...
7.8454598110695439e-02 ...
1.8556144981932693e-15 ...
-7.8454598110692039e-02 ...
-1.4714062644400691e-01 ...
-2.0475435280006538e-01 ...
-2.5342245627376409e-01 ...
-2.9521507354489812e-01 ...
-3.3162434211071268e-01 ...
-3.6368963007343247e-01 ...
-3.9214695126086474e-01 ...
-4.1753154736660875e-01 ...
-4.4024311479639405e-01 ...
-4.6058717507334479e-01 ...
-4.7880188156541748e-01 ...
-4.9507584519298525e-01 ...
-5.0956023409153495e-01 ...
-5.2237738240462783e-01 ...
-5.3362695382449699e-01 ...
-5.4339034026979172e-01 ...
-5.5173387035838595e-01 ...
-5.5871124113890858e-01 ...
-5.6436542996181149e-01 ...
-5.6873001936059697e-01 ...
-5.7183017467957042e-01 ...
-5.7368339533532553e-01 ...
-5.7430000000000003e-01 ...
-5.7368339533532553e-01 ...
-5.7183017467957054e-01 ...
-5.6873001936059719e-01 ...
-5.6436542996181183e-01 ...
-5.5871124113890902e-01 ...
-5.5173387035838639e-01 ...
-5.4339034026979216e-01 ...
-5.3362695382449765e-01 ...
-5.2237738240462850e-01 ...
-5.0956023409153584e-01 ...
-4.9507584519298592e-01 ...
-4.7880188156541814e-01 ...
-4.6058717507334584e-01 ...
-4.4024311479639511e-01 ...
-4.1753154736661019e-01 ...
-3.9214695126086602e-01 ...
-3.6368963007343458e-01 ...
-3.3162434211071512e-01 ...
-2.9521507354489918e-01 ...
-2.5342245627376719e-01 ...
-2.0475435280010559e-01 ...
-1.4714062644404508e-01 ...
-7.8454598109973198e-02 ...
];

siginit(:,1) = [...
7.0742092117375961e+00 ...
7.2742133107095537e+00 ...
7.3538701094275938e+00 ...
7.0547922684835660e+00 ...
6.6603794071553057e+00 ...
6.2648746437571834e+00 ...
5.9144095736820770e+00 ...
5.5938709540204687e+00 ...
5.3098893899559014e+00 ...
5.0436605469883231e+00 ...
4.7996587422878978e+00 ...
4.5612495478954651e+00 ...
4.3343421238163620e+00 ...
4.1027110632102630e+00 ...
3.8744287643840329e+00 ...
3.6314684336561291e+00 ...
3.3848641485484423e+00 ...
3.1111378083806476e+00 ...
2.8245598472739717e+00 ...
2.4846140831893608e+00 ...
2.0967181839480755e+00 ...
1.5302022673433040e+00 ...
6.2445459216848376e-01 ...
-1.1967026196289894e+00 ...
-2.5350703217315331e+00 ...
-8.2279218977933288e-01 ...
1.3160787458153824e+00 ...
2.4819584709096456e+00 ...
3.2751859017458371e+00 ...
3.8629568225976825e+00 ...
4.3893476946472783e+00 ...
4.8455396727071403e+00 ...
5.2800198952288326e+00 ...
5.6715006199258760e+00 ...
6.0490035085878340e+00 ...
6.3926682610784606e+00 ...
6.7241766019369713e+00 ...
7.0253017191678504e+00 ...
7.3137624766382192e+00 ...
7.5723269147801560e+00 ...
7.8162294484914110e+00 ...
8.0288777891126806e+00 ...
8.2239688551600132e+00 ...
8.3854784991791611e+00 ...
8.5263365442650318e+00 ...
8.6311853378102494e+00 ...
8.7128291857950408e+00 ...
8.7566825977355531e+00 ...
8.7759017054299999e+00 ...
8.7566825977210527e+00 ...
8.7128291858276512e+00 ...
8.6311853377667909e+00 ...
8.5263365443305599e+00 ...
8.3854784991061670e+00 ...
8.2239688552588088e+00 ...
8.0288777890097052e+00 ...
7.8162294486239663e+00 ...
7.5723269146467089e+00 ...
7.3137624768050378e+00 ...
7.0253017190038198e+00 ...
6.7241766021380345e+00 ...
6.3926682608845979e+00 ...
6.0490035088219782e+00 ...
5.6715006197054780e+00 ...
5.2800198954915327e+00 ...
4.8455396724685764e+00 ...
4.3893476949264212e+00 ...
3.8629568223622801e+00 ...
3.2751859020120464e+00 ...
2.4819584707091145e+00 ...
1.3160787460962164e+00 ...
-8.2279219021385219e-01 ...
-2.5350703205034222e+00 ...
-1.1967026213422738e+00 ...
6.2445459371766554e-01 ...
1.5302022659861574e+00 ...
2.0967181850388625e+00 ...
2.4846140822411220e+00 ...
2.8245598480430898e+00 ...
3.1111378076899765e+00 ...
3.3848641491129738e+00 ...
3.6314684331351224e+00 ...
3.8744287648082656e+00 ...
4.1027110628112524e+00 ...
4.3343421241351914e+00 ...
4.5612495475918831e+00 ...
4.7996587425212329e+00 ...
5.0436605467648015e+00 ...
5.3098893901146518e+00 ...
5.5938709538687812e+00 ...
5.9144095737695697e+00 ...
6.2648746436762135e+00 ...
6.6603794071755686e+00 ...
7.0547922684202584e+00 ...
7.3538701094187910e+00 ...
7.2742133107911018e+00 ...
];

siginit(:,2) = [...
-7.5227790928398734e+00 ...
-6.3318046424015195e+00 ...
-5.0987483927614115e+00 ...
-4.9187628492792959e+00 ...
-5.0676532216867427e+00 ...
-5.3543419689897487e+00 ...
-5.6322329440268559e+00 ...
-5.9173115641581573e+00 ...
-6.1674774662217819e+00 ...
-6.4097068515547591e+00 ...
-6.6204209537559562e+00 ...
-6.8219466927470389e+00 ...
-6.9966831135943988e+00 ...
-7.1627305610456489e+00 ...
-7.3054203615876707e+00 ...
-7.4398829999955129e+00 ...
-7.5532624454462018e+00 ...
-7.6586143062938978e+00 ...
-7.7443271858286922e+00 ...
-7.8219648809753810e+00 ...
-7.8808047592210668e+00 ...
-7.9313143519570319e+00 ...
-7.9634019130491778e+00 ...
-7.9867196673627623e+00 ...
-7.9916000717480893e+00 ...
-7.9870979450774469e+00 ...
-7.9637885746899428e+00 ...
-7.9303159846718554e+00 ...
-7.8773275921775952e+00 ...
-7.8132405988507605e+00 ...
-7.7286035845020855e+00 ...
-7.6318203988661386e+00 ...
-7.5131634349805934e+00 ...
-7.3813172318950704e+00 ...
-7.2260855613381700e+00 ...
-7.0568970334601069e+00 ...
-6.8628819561163432e+00 ...
-6.6550327027322744e+00 ...
-6.4215924869364480e+00 ...
-6.1767579527693419e+00 ...
-5.9078409482683369e+00 ...
-5.6363216764269293e+00 ...
-5.3503507712190528e+00 ...
-5.0934384736341425e+00 ...
-4.8744793115924230e+00 ...
-4.8503809653908823e+00 ...
-5.2525013771125888e+00 ...
-6.7991232213684736e+00 ...
-8.2009796763270177e+00 ...
-6.7991232209746020e+00 ...
-5.2525013775789926e+00 ...
-4.8503809649018814e+00 ...
-4.8744793120640955e+00 ...
-5.0934384731449978e+00 ...
-5.3503507717045942e+00 ...
-5.6363216759326686e+00 ...
-5.9078409487640489e+00 ...
-6.1767579522722089e+00 ...
-6.4215924874388781e+00 ...
-6.6550327022332718e+00 ...
-6.8628819566230570e+00 ...
-7.0568970329600420e+00 ...
-7.2260855618477233e+00 ...
-7.3813172313940916e+00 ...
-7.5131634354919505e+00 ...
-7.6318203983647352e+00 ...
-7.7286035850143726e+00 ...
-7.8132405983491591e+00 ...
-7.8773275926901434e+00 ...
-7.9303159841704982e+00 ...
-7.9637885752020123e+00 ...
-7.9870979445768793e+00 ...
-7.9916000722592351e+00 ...
-7.9867196668629274e+00 ...
-7.9634019135588030e+00 ...
-7.9313143514589282e+00 ...
-7.8808047597284654e+00 ...
-7.8219648804795110e+00 ...
-7.7443271863329377e+00 ...
-7.6586143058012803e+00 ...
-7.5532624459462214e+00 ...
-7.4398829995075086e+00 ...
-7.3054203620814988e+00 ...
-7.1627305605646425e+00 ...
-6.9966831140797678e+00 ...
-6.8219466922758496e+00 ...
-6.6204209542286394e+00 ...
-6.4097068510990782e+00 ...
-6.1674774666740451e+00 ...
-5.9173115637287488e+00 ...
-5.6322329444442163e+00 ...
-5.3543419686083915e+00 ...
-5.0676532220358546e+00 ...
-4.9187628489964839e+00 ...
-5.0987483929716619e+00 ...
-6.3318046423217336e+00 ...
];


% start of final condition
Xfinal(1:96,1) = [...
-1.0897702092812538e-01 ...
-1.0857670105463245e-01 ...
-1.0727143985200455e-01 ...
-1.0514345205440426e-01 ...
-1.0206786574912133e-01 ...
-9.8111281158415220e-02 ...
-9.3138701064419155e-02 ...
-8.7220369989880378e-02 ...
-8.0241729996916714e-02 ...
-7.2329113386287988e-02 ...
-6.3472671730300606e-02 ...
-5.3997134566843533e-02 ...
-4.4227423973533318e-02 ...
-3.5061641811398772e-02 ...
-2.7726979000318883e-02 ...
-2.4449673115510703e-02 ...
-2.7974737392674250e-02 ...
-4.1581094098386229e-02 ...
-6.7666968097582852e-02 ...
-1.0762143695968576e-01 ...
-1.6101176126534797e-01 ...
-2.2628941695009194e-01 ...
-3.0037494307349721e-01 ...
-3.7967819173124978e-01 ...
-4.6009950639582570e-01 ...
-5.3826733507593771e-01 ...
-6.1167254028864793e-01 ...
-6.7905063918738662e-01 ...
-7.4003827975484882e-01 ...
-7.9489699925237811e-01 ...
-8.4414687137488664e-01 ...
-8.8841317954934063e-01 ...
-9.2825278912082265e-01 ...
-9.6418978366599428e-01 ...
-9.9661359467174371e-01 ...
-1.0258935490333847e+00 ...
-1.0522703727275404e+00 ...
-1.0759962309185227e+00 ...
-1.0972046074757702e+00 ...
-1.1160645029553742e+00 ...
-1.1326358609828195e+00 ...
-1.1470370579025027e+00 ...
-1.1592915540083375e+00 ...
-1.1695041780702637e+00 ...
-1.1776969697175361e+00 ...
-1.1839838660551927e+00 ...
-1.1883907457688474e+00 ...
-1.1910241006661955e+00 ...
-1.1918817559510855e+00 ...
-1.1910240943087924e+00 ...
-1.1883907330297014e+00 ...
-1.1839838468889576e+00 ...
-1.1776969440630491e+00 ...
-1.1695041458559676e+00 ...
-1.1592915151552834e+00 ...
-1.1470370123245355e+00 ...
-1.1326358085826032e+00 ...
-1.1160644436177614e+00 ...
-1.0972045410582465e+00 ...
-1.0759961572401637e+00 ...
-1.0522702915554487e+00 ...
-1.0258934600659422e+00 ...
-9.9661349751781225e-01 ...
-9.6418967781895215e-01 ...
-9.2825267393277389e-01 ...
-8.8841305421102845e-01 ...
-8.4414673492647274e-01 ...
-7.9489685065322058e-01 ...
-7.4003811807066067e-01 ...
-6.7905046394276602e-01 ...
-6.1167235199725833e-01 ...
-5.3826713584698904e-01 ...
-4.6009930026735829e-01 ...
-3.7967798436746797e-01 ...
-3.0037474056063118e-01 ...
-2.2628922425454151e-01 ...
-1.6101158110774680e-01 ...
-1.0762126976965755e-01 ...
-6.7666812802278528e-02 ...
-4.1580949180643208e-02 ...
-2.7974601720576895e-02 ...
-2.4449546315040756e-02 ...
-2.7726861232351394e-02 ...
-3.5061533352881910e-02 ...
-4.4227324960695077e-02 ...
-5.3997044969688691e-02 ...
-6.3472591391318459e-02 ...
-7.2329042076823030e-02 ...
-8.0241667452263840e-02 ...
-8.7220315940874454e-02 ...
-9.3138655253518263e-02 ...
-9.8111243354058145e-02 ...
-1.0206783575125021e-01 ...
-1.0514342970059226e-01 ...
-1.0727142501903367e-01 ...
-1.0857669365848527e-01 ...
];

Xfinal(97:192,1) = [...
1.2612230761574200e-05 ...
8.0678939961714699e-02 ...
1.6133833339163842e-01 ...
2.4198052161737740e-01 ...
3.2259458214623538e-01 ...
4.0316752055465843e-01 ...
4.8368873872964041e-01 ...
5.6414309604150337e-01 ...
6.4451889334811641e-01 ...
7.2480220237552828e-01 ...
8.0499362987991019e-01 ...
8.8510430165493637e-01 ...
9.6518630145369810e-01 ...
1.0453269162117307e+00 ...
1.1256614392348752e+00 ...
1.2062444185406191e+00 ...
1.2868009889497403e+00 ...
1.3662437732125854e+00 ...
1.4424614128322777e+00 ...
1.5124006820689346e+00 ...
1.5726451128394396e+00 ...
1.6197942035500026e+00 ...
1.6512022835167601e+00 ...
1.6652120152622898e+00 ...
1.6618334658685814e+00 ...
1.6423217008136946e+00 ...
1.6091221139608516e+00 ...
1.5648602418784114e+00 ...
1.5121416188671066e+00 ...
1.4530267690656260e+00 ...
1.3891724785721657e+00 ...
1.3217414656737128e+00 ...
1.2516140641751312e+00 ...
1.1793894626282528e+00 ...
1.1055300997912958e+00 ...
1.0303540008808727e+00 ...
9.5411884477796238e-01 ...
8.7700532317698099e-01 ...
7.9916818458060890e-01 ...
7.2071896148794856e-01 ...
6.4175884637480485e-01 ...
5.6236501951550133e-01 ...
4.8261391894870648e-01 ...
4.0257028956661778e-01 ...
3.2229994956801783e-01 ...
2.4185943408133551e-01 ...
1.6130286597804122e-01 ...
8.0674379861700590e-02 ...
1.2481548374133882e-05 ...
-8.0649416628983936e-02 ...
-1.6127790260407948e-01 ...
-2.4183447028699137e-01 ...
-3.2227498533472504e-01 ...
-4.0254532459715892e-01 ...
-4.8258895320332473e-01 ...
-5.6234005267261256e-01 ...
-6.4173387836664897e-01 ...
-7.2069399195825457e-01 ...
-7.9914321341754269e-01 ...
-8.7698034996485130e-01 ...
-9.5409386932434181e-01 ...
-1.0303290226559185e+00 ...
-1.1055051184407176e+00 ...
-1.1793644773865055e+00 ...
-1.2515890743478322e+00 ...
-1.3217164700016819e+00 ...
-1.3891474756627464e+00 ...
-1.4530017566947533e+00 ...
-1.5121165943921993e+00 ...
-1.5648352016031835e+00 ...
-1.6090970538309985e+00 ...
-1.6422966163599977e+00 ...
-1.6618083537469925e+00 ...
-1.6651868739307563e+00 ...
-1.6511771146124594e+00 ...
-1.6197690112459391e+00 ...
-1.5726199031227479e+00 ...
-1.5123754606963509e+00 ...
-1.4424361846715001e+00 ...
-1.3662185413996746e+00 ...
-1.2867757556079642e+00 ...
-1.2062191847439059e+00 ...
-1.1256362058745499e+00 ...
-1.0453016836354538e+00 ...
-9.6516107002519091e-01 ...
-8.8507907130765806e-01 ...
-8.0496840069441400e-01 ...
-7.2477697411929820e-01 ...
-6.4449366602181890e-01 ...
-5.6411786938475206e-01 ...
-4.8366351274518715e-01 ...
-4.0314229499582577e-01 ...
-3.2256935703914508e-01 ...
-2.4195529673607424e-01 ...
-1.6131310875796456e-01 ...
-8.0653715430227021e-02 ...
];

Xfinal(1:96,2) = [...
1.1933571965100629e+00 ...
1.1923621986054203e+00 ...
1.1892950467664536e+00 ...
1.1843120615641716e+00 ...
1.1773769374934697e+00 ...
1.1686537413263218e+00 ...
1.1580580992447393e+00 ...
1.1456717536073977e+00 ...
1.1313050600512129e+00 ...
1.1149435038761166e+00 ...
1.0963228219421324e+00 ...
1.0753847583005294e+00 ...
1.0518400056013186e+00 ...
1.0256103119434872e+00 ...
9.9637016684554547e-01 ...
9.6397573112904089e-01 ...
9.2799644455200248e-01 ...
8.8814630329167676e-01 ...
8.4382336096025790e-01 ...
7.9457003387942260e-01 ...
7.3966481110872606e-01 ...
6.7868802882848134e-01 ...
6.1127307598527936e-01 ...
5.3788259932606053e-01 ...
4.5969014953275955e-01 ...
3.7927174854995283e-01 ...
2.9997726883653830e-01 ...
2.2590187398806824e-01 ...
1.6065735178151569e-01 ...
1.0730318844625311e-01 ...
6.7402866932459379e-02 ...
4.1368946820567944e-02 ...
2.7813279281143476e-02 ...
2.4336945573901463e-02 ...
2.7650709898548252e-02 ...
3.5023837417310043e-02 ...
4.4214109679523370e-02 ...
5.4018451112515631e-02 ...
6.3519750211385242e-02 ...
7.2420744260747516e-02 ...
8.0373561596633766e-02 ...
8.7414415726576378e-02 ...
9.3389154323416879e-02 ...
9.8435736343930269e-02 ...
1.0245250273205597e-01 ...
1.0559523154927389e-01 ...
1.0776532262098881e-01 ...
1.0910828781593994e-01 ...
1.0951331850341021e-01 ...
1.0910829516581864e-01 ...
1.0776533736720291e-01 ...
1.0559525377892513e-01 ...
1.0245253258012360e-01 ...
9.8435773981669084e-02 ...
9.3389199965592543e-02 ...
8.7414469615782656e-02 ...
8.0373624005057459e-02 ...
7.2420815466781918e-02 ...
6.3519830489492612e-02 ...
5.4018540694231100e-02 ...
4.4214208722778009e-02 ...
3.5023945945321031e-02 ...
2.7650827764334078e-02 ...
2.4337072485978269e-02 ...
2.7813415063877644e-02 ...
4.1369091837542019e-02 ...
6.7403022311896488e-02 ...
1.0730335570881243e-01 ...
1.6065753201190736e-01 ...
2.2590206676862967e-01 ...
2.9997747145590353e-01 ...
3.7927195604624658e-01 ...
4.5969035581253709e-01 ...
5.3788279871907141e-01 ...
6.1127326444256025e-01 ...
6.7868820423401932e-01 ...
7.3966497294776168e-01 ...
7.9457018262617618e-01 ...
8.4382349755496022e-01 ...
8.8814642877519445e-01 ...
9.2799655988689167e-01 ...
9.6397583711778834e-01 ...
9.9637026412932406e-01 ...
1.0256104010150482e+00 ...
1.0518400868429261e+00 ...
1.0753848320061099e+00 ...
1.0963228883497016e+00 ...
1.1149435631777964e+00 ...
1.1313051124126430e+00 ...
1.1456717991651542e+00 ...
1.1580581381167361e+00 ...
1.1686537736031597e+00 ...
1.1773769632480331e+00 ...
1.1843120808437315e+00 ...
1.1892950596052569e+00 ...
1.1923622050199290e+00 ...
];

Xfinal(97:192,2) = [...
1.2806502273252031e-05 ...
8.0673123070271385e-02 ...
1.6132773523867386e-01 ...
2.4189438083266238e-01 ...
3.2237525303864745e-01 ...
4.0265053763485920e-01 ...
4.8272093564945551e-01 ...
5.6246654349315139e-01 ...
6.4189158549163139e-01 ...
7.2087542214557310e-01 ...
7.9939497053629982e-01 ...
8.7729095825178882e-01 ...
9.5448716150020652e-01 ...
1.0307684196744251e+00 ...
1.1059896581355770e+00 ...
1.1798487370086770e+00 ...
1.2520739468891133e+00 ...
1.3221720606202136e+00 ...
1.3895882636080623e+00 ...
1.4534129996766660e+00 ...
1.5125130430946030e+00 ...
1.5652086192945922e+00 ...
1.6094491078979591e+00 ...
1.6426270762607278e+00 ...
1.6620996233849121e+00 ...
1.6654481211348924e+00 ...
1.6513845561170870e+00 ...
1.6199300458707053e+00 ...
1.5727303158658221e+00 ...
1.5124393936070137e+00 ...
1.4424755002918235e+00 ...
1.3662292125876552e+00 ...
1.2867825032433851e+00 ...
1.2062076794798855e+00 ...
1.1256308880471386e+00 ...
1.0452840969714934e+00 ...
9.6515718815814067e-01 ...
8.8506851518281093e-01 ...
8.0497657553749313e-01 ...
7.2477817822656043e-01 ...
6.4451241003701609e-01 ...
5.6412614318812315e-01 ...
4.8368920592489989e-01 ...
4.0315600152192899e-01 ...
3.2260059379505440e-01 ...
2.4197339478306940e-01 ...
1.6134578409387615e-01 ...
8.0674654936624263e-02 ...
1.2675723470232562e-05 ...
-8.0649303547939283e-02 ...
-1.6132043280695496e-01 ...
-2.4194804371911643e-01 ...
-3.2257524300702950e-01 ...
-4.0313065114467883e-01 ...
-4.8366385602893730e-01 ...
-5.6410079392809132e-01 ...
-6.4448706150329160e-01 ...
-7.2475283058826556e-01 ...
-8.0495122888562420e-01 ...
-8.8504316965766117e-01 ...
-9.6513184376945138e-01 ...
-1.0452587536926812e+00 ...
-1.1256055456035032e+00 ...
-1.2061823374313976e+00 ...
-1.2867571607895358e+00 ...
-1.3662038685676083e+00 ...
-1.4424501526766602e+00 ...
-1.5124140391769991e+00 ...
-1.5727049498395087e+00 ...
-1.6199046623998783e+00 ...
-1.6513591492854212e+00 ...
-1.6654226866721566e+00 ...
-1.6620741597266233e+00 ...
-1.6426015848488997e+00 ...
-1.6094235921761224e+00 ...
-1.5651830836350875e+00 ...
-1.5124874916618607e+00 ...
-1.4533874360728829e+00 ...
-1.3895626905824947e+00 ...
-1.3221464803010159e+00 ...
-1.2520483607703152e+00 ...
-1.1798231462538644e+00 ...
-1.1059640635405954e+00 ...
-1.0307428219131940e+00 ...
-9.5446156103009971e-01 ...
-8.7726535551120421e-01 ...
-7.9936936581569473e-01 ...
-7.2084981576119800e-01 ...
-6.4186597764254194e-01 ...
-5.6244093442655052e-01 ...
-4.8269532551305538e-01 ...
-4.0262492663940058e-01 ...
-3.2234964130804855e-01 ...
-2.4186876856506151e-01 ...
-1.6130212255320703e-01 ...
-8.0647510164341060e-02 ...
];

sigfinal(:,1) = [...
3.9689795292518961e+00 ...
3.9738612987263555e+00 ...
3.9704366608981845e+00 ...
3.9767182857698042e+00 ...
3.9747599720805105e+00 ...
3.9823399000327750e+00 ...
3.9818442225738959e+00 ...
3.9906234042011075e+00 ...
3.9916406284773789e+00 ...
4.0014847789896679e+00 ...
4.0036575456655239e+00 ...
4.0123023104203090e+00 ...
4.0078621060236506e+00 ...
3.9895160529397375e+00 ...
3.9090617278177824e+00 ...
3.7338315652437486e+00 ...
3.4475778250370146e+00 ...
3.1349936508399945e+00 ...
2.8773691434367752e+00 ...
2.6907491208966738e+00 ...
2.5653884535691889e+00 ...
2.4982942666240735e+00 ...
2.5395680111319900e+00 ...
2.7222858230535683e+00 ...
3.0826334063765817e+00 ...
3.5597184843985379e+00 ...
4.1175859552376197e+00 ...
4.6656478405581492e+00 ...
5.2005427423855446e+00 ...
5.6731474720110660e+00 ...
6.1165098411626406e+00 ...
6.4991223904512063e+00 ...
6.8611414556521053e+00 ...
7.1719106684816882e+00 ...
7.4700884503651315e+00 ...
7.7235710620044351e+00 ...
7.9692118582869291e+00 ...
8.1740890927329186e+00 ...
8.3739626275676837e+00 ...
8.5356637426414590e+00 ...
8.6943858666027829e+00 ...
8.8169818897186030e+00 ...
8.9382590026071096e+00 ...
9.0249248841415231e+00 ...
9.1111804916781391e+00 ...
9.1633263041071782e+00 ...
9.2150734417470588e+00 ...
9.2326440851044485e+00 ...
9.2497300349158458e+00 ...
9.2326440401066989e+00 ...
9.2150733518000543e+00 ...
9.1633261694029109e+00 ...
9.1111803123516708e+00 ...
9.0249246604629398e+00 ...
8.9382587345243927e+00 ...
8.8169815772801918e+00 ...
8.6943855093666862e+00 ...
8.5356633404750681e+00 ...
8.3739621797915955e+00 ...
8.1740885991279555e+00 ...
7.9692113178994370e+00 ...
7.7235704743202227e+00 ...
7.4700878138287150e+00 ...
7.1719099819394261e+00 ...
6.8611407166816303e+00 ...
6.4991215976588830e+00 ...
6.1165089932252723e+00 ...
5.6731465737795155e+00 ...
5.2005418091833961e+00 ...
4.6656469160578453e+00 ...
4.1175851229122076e+00 ...
3.5597178822071824e+00 ...
3.0826331898093540e+00 ...
2.7222861062259764e+00 ...
2.5395687766652597e+00 ...
2.4982953673268327e+00 ...
2.5653896637185838e+00 ...
2.6907502471284799e+00 ...
2.8773700806435865e+00 ...
3.1349943639321860e+00 ...
3.4475783209027746e+00 ...
3.7338319145099854e+00 ...
3.9090619942839528e+00 ...
3.9895162669706572e+00 ...
4.0078622744285477e+00 ...
4.0123024406256933e+00 ...
4.0036576457157791e+00 ...
4.0014848561883367e+00 ...
3.9916406880536304e+00 ...
3.9906234503497711e+00 ...
3.9818442581015834e+00 ...
3.9823399271762168e+00 ...
3.9747599922637686e+00 ...
3.9767183001348045e+00 ...
3.9704366700934171e+00 ...
3.9738613032337016e+00 ...
];

sigfinal(:,2) = [...
9.2396369078275455e+00 ...
9.2320043356324835e+00 ...
9.2086160672468882e+00 ...
9.1682771681596495e+00 ...
9.1099479686788207e+00 ...
9.0330798576757054e+00 ...
8.9375761970556180e+00 ...
8.8232525606286067e+00 ...
8.6899140107286126e+00 ...
8.5370757051158233e+00 ...
8.3645683938134372e+00 ...
8.1716163491649656e+00 ...
7.9576665087637375e+00 ...
7.7208261315707887e+00 ...
7.4597158917329294e+00 ...
7.1710954682155945e+00 ...
6.8528272265635719e+00 ...
6.4999400559267793e+00 ...
6.1093235994756316e+00 ...
5.6742364403875118e+00 ...
5.1933736393591792e+00 ...
4.6658246888008934e+00 ...
4.1101262834972898e+00 ...
3.5585178216091728e+00 ...
3.0757962227944367e+00 ...
2.7202106712929774e+00 ...
2.5348576804011969e+00 ...
2.4960411470607684e+00 ...
2.5630663316489923e+00 ...
2.6880605082319877e+00 ...
2.8767341399561501e+00 ...
3.1319756817750677e+00 ...
3.4481010542235819e+00 ...
3.7304578369197445e+00 ...
3.9100339000921460e+00 ...
3.9859074229859890e+00 ...
4.0093689350343276e+00 ...
4.0090079103296956e+00 ...
4.0059838550839579e+00 ...
3.9988152121246574e+00 ...
3.9948301583705867e+00 ...
3.9885349963375685e+00 ...
3.9856105585517434e+00 ...
3.9804836313350909e+00 ...
3.9786477271531542e+00 ...
3.9747275361094920e+00 ...
3.9741558734826921e+00 ...
3.9716551166596847e+00 ...
3.9725843871292232e+00 ...
3.9716551125781150e+00 ...
3.9741558650566868e+00 ...
3.9747275226832688e+00 ...
3.9786477079172684e+00 ...
3.9804836049131973e+00 ...
3.9856105234576127e+00 ...
3.9885349501724834e+00 ...
3.9948300984826681e+00 ...
3.9988151342652789e+00 ...
4.0059837543574508e+00 ...
4.0090077794400987e+00 ...
4.0093687662835729e+00 ...
3.9859072089141097e+00 ...
3.9100336340071693e+00 ...
3.7304574881355919e+00 ...
3.4481005585014741e+00 ...
3.1319749684669369e+00 ...
2.8767332011644564e+00 ...
2.6880593803210826e+00 ...
2.5630651180509014e+00 ...
2.4960400440648187e+00 ...
2.5348569111020609e+00 ...
2.7202103868864955e+00 ...
3.0757964374295539e+00 ...
3.5585184245767980e+00 ...
4.1101271159428201e+00 ...
4.6658256147965149e+00 ...
5.1933745733725640e+00 ...
5.6742373398697001e+00 ...
6.1093244482401721e+00 ...
6.4999408496959434e+00 ...
6.8528279662972293e+00 ...
7.1710961555674126e+00 ...
7.4597165290026348e+00 ...
7.7208267200990415e+00 ...
7.9576670501386042e+00 ...
8.1716168440323749e+00 ...
8.3645688430718792e+00 ...
8.5370761088343077e+00 ...
8.6899143692610412e+00 ...
8.8232528737821845e+00 ...
8.9375764650352316e+00 ...
9.0330800803812252e+00 ...
9.1099481463755101e+00 ...
9.1682773009331680e+00 ...
9.2086161554789427e+00 ...
9.2320043796123343e+00 ...
];



end % extensional1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function theta = arcLengthEllipse(o,a,b,N)
% find the independent variable theta for the ellipse
% (a*cos(theta),b*sin(theta)) that gives N equispaced points in arclength
% to machine precision

Nup = 2^15; modesUp = (-Nup/2:1:Nup/2-1)';
ind = find(modesUp ~= 0);
ind0 = find(modesUp == 0);
thetaUp = (0:Nup-1)'*2*pi/Nup;
sup = sqrt(a^2*sin(thetaUp).^2 + b^2*cos(thetaUp).^2);
suph = fftshift(fft(sup))/Nup;
arc = sum(sup)*2*pi/Nup;
ds = arc/N;
theta = zeros(N,1);

%s = @(theta) real(sum(suph.*(exp(1i*modesUp*theta) - 1)));
deriv_s = @(theta) sqrt(a^2*sin(theta).^2 + b^2*cos(theta).^2);

for k = 2:N
  theta(k) = theta(k-1);
  % initialize as previous iterate
  s = 0;
  while abs(s - (k-1)*ds) > 1e-14
    s = real(sum(-1i*suph(ind)./modesUp(ind).*...
        (exp(1i*modesUp(ind)*theta(k))-1))) + ...
        suph(ind0)*theta(k);
    theta(k) = theta(k) - (s - (k-1)*ds)/deriv_s(theta(k));
  end
end


end % arcLengthEllipse


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [jacobian,tangent,curvature] = diffProp(o,X)
% [jacobian,tangent,curvature] = diffProp(X) returns differential
% properties of the curve each column of the matrix X. Each column of 
% X should be a closed curve defined in plane. The tangent is the 
% normalized tangent.
%
% EXAMPLE:
%    n = 128; nv = 3;
%    X = boundary(n,'nv',nv,'curly');
%    c = curve;
%    [k t s] = c.diffProp(X);

antiAlias = false;

N = size(X,1)/2;
modes = [(0:N/2-1)';-N/2;(-N/2+1:-1)'];

% get the x y components
oc = curve;
Dx = real(ifft(1i*modes.*fft(X(1:N,:))));
Dy = real(ifft(1i*modes.*fft(X(N+1:2*N,:))));
DDx = real(ifft(1i*modes.*fft(Dx)));
DDy = real(ifft(1i*modes.*fft(Dy)));
% don't need to upsample here since taking the derivative is diagonal in
% fourier space

if antiAlias
  jacobian = o.fourierMultiply(Dx,Dx) + ...
      o.fourierMultiply(Dy,Dy);
  jacobian = o.fourierExponentiate(jacobian,0.5);
  tangent = oc.setXY(o.fourierDivide(Dx,jacobian),...
    o.fourierDivide(Dy,jacobian));
  jac3 = o.fourierMultiply(jacobian,...
      o.fourierMultiply(jacobian,jacobian));
  curvature = o.fourierDivide(o.fourierMultiply(Dx,DDy) - ...
      o.fourierMultiply(Dy,DDx),jac3);
  % curvature of the curve
else
  jacobian = sqrt(Dx.^2 + Dy.^2);
  tangent = [Dx./jacobian;Dy./jacobian];
  jac3 = jacobian.^3;
  curvature = (Dx.*DDy - Dy.*DDx)./jac3;
end



end % diffProp




end % methods

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
methods (Static)


function f = fourierMultiply(f,g)
% function f = fourierMultiply(f,g,uprate) does an upsampled
% multiplication of two periodic functions and then filters all the high
% frequencies.  This is to help get rid of aliasing

N = size(f,1);
nv = size(f,2);
uprate = 3/2;

f = fft(f); g = fft(g);
% move to Fourier space
if mod(N,2) == 0
  f = fft(ifft([f(1:N/2,:); zeros((uprate-1)*N,nv); f(N/2+1:end,:)]).*...
    ifft([g(1:N/2,:); zeros((uprate-1)*N,nv); g(N/2+1:end,:)]))*uprate;
  % upsample the spectrum, take ifft, multiply, take the fft, and scale
  % appropriately
  f = real(ifft([f(1:N/2,:);zeros(1,nv);f(end-N/2+2:end,:)]));
  % truncate spectrum, take the ifft, and take the real part
else
  m = (N-1)/2;
  % number of positive and negative Fourier modes
  f = fft(ifft([f(1:m+1,:);zeros((uprate-1)*(N+1),nv);f(m+2:end,:)]) .* ...
       ifft([g(1:m+1,:);zeros((uprate-1)*(N+1),nv);g(m+2:end,:)]))*...
       (uprate*N+(uprate-1))/N;
  % upsample the spectrum, take ifft, multiply, take the fft, and scale
  % appropriately
  f = ifft([f(1:m+1);f(end-m+1:end,:)]);
  % truncate spectrum, take the ifft, and take the real part
end

end % fourierMultiply

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function f = fourierExponentiate(f,pow)
% function f = fourierExponentiate(f,pow) does an upsampled
% exponentiation of a periodic function and then filters all the high
% frequencies.  This is to help get rid of aliasing. 

N = size(f,1);
nv = size(f,2);

uprate = 3/2;
f = fft(f);
% move to Fourier space
if mod(N,2) == 0
  f = uprate^(pow-1) * fft(...
      (ifft([f(1:N/2,:);zeros((uprate-1)*N,nv);f(N/2+1:end,:)])).^pow);
  % upsample the spectrum, take ifft, exponentiate, take the fft, and
  % scale appropriatly
  f = real(ifft([f(1:N/2,:);zeros(1,nv);f(end-N/2+2:end,:)]));
  % truncate spectrum, take the ifft, and take the real part
else
  m = (N-1)/2;
  % number of positive and negative Fourier modes
  f = ((uprate*(N+1)-1)/N)^(pow-1)*fft(...
      ifft([f(1:m+1,:);zeros((uprate-1)*(N+1),nv);f(m+2:end,:)]).^pow);
  f = real(ifft([f(1:m+1);f(end-m+1:end,:)]));
end

end % fourierExponentiate

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function f = fourierDivide(f,g,zeroVal)
% function f = fourierDivide(f,g,zeroInd,zeroVal) does an upsampled
% division of two periodic functions and then filters all the high
% frequenices.  This is to help get rid of aliasing.  The function g
% should never be zero unless f is as well.  In the case that both of
% them are zero, f/g should have a removable singuilarity.  The limiting
% value is in zeroVal

N = size(f,1);
nv = size(f,2);
uprate = 3/2;

filter = zeros(N*uprate,nv);
filter(1:N/2,:) = 1;
filter(end-N/2+2:end,:) = 1;

zeroInd = find(abs(interpft(g,uprate*N)) < 1e-12);
% Find the points where g being upsampled is 0
f = interpft(f,uprate*N)./interpft(g,uprate*N);
% do upsampled division
if numel(zeroInd == 1)
  f(zeroInd) = zeroVal;
end
% assign the removable singularity by placing in input limiting value
f = ifft(filter.*fft(f));
% Kill high frequencies
f = interpft(f,N);
% downsample to the appropriate resolution

end % fourierDivide





end % methods (Static)



end % classdef
